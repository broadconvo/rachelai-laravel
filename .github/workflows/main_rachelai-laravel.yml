# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy PHP app to Azure Web App - rachelai-laravel

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      APP_ENV: production
      APP_KEY: ${{ secrets.APP_KEY }}

      DB_CONNECTION: pgsql
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'  # Specify your PHP version
          extensions: mbstring, bcmath, pgsql, pdo_pgsql
          ini-values: |
            memory_limit=512M
            upload_max_filesize=50M
            post_max_size=50M
          coverage: none

      # Step 3-1: Check if composer exists
      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.json'

      # Step 3-2: cache composer dependencies
      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # Step 3-3: Install composer dependencies
      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: |
          composer validate --no-check-publish && 
          composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      # Step 4: Use client secret to create Google Client Secret File
      - name: Create Google Client Secret File
        run: |
          mkdir -p storage/app/google-api
          echo "${{ secrets.GOOGLE_CLIENT_SECRET }}" | tee storage/app/google-api/client_secret.json > /dev/null

      # Step 5: Wait for PostgreSQL to be ready
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..10}; do
            pg_isready -h ${{secrets.DB_HOST}} -p ${{secrets.DB_PORT}} -U ${{ secrets.DB_USERNAME }} && break
            echo "Waiting for PostgreSQL..."
            sleep 5
          done

      # Step 6: Run tests (optional)
      #- name: Run tests
      #  run: php artisan test --no-interaction --verbosity=normal

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'rachelai-laravel'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_E4B90E62F7FD4C10849E72F73FE08088 }}
